// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
// clang-format off
/*
 * Copyright (C) 2022-present The WebF authors. All rights reserved.
 */
#include "plugin_api/transition_event.h"
#include "plugin_api/event_target.h"
#include "plugin_api/exception_state.h"
#include "plugin_api/executing_context.h"
#include "core/dom/events/event.h"
#include "core/dom/events/custom_event.h"
#include "core/native/script_value_ref.h"
#include "core/dom/events/event_target.h"
#include "core/events/animation_event.h"
#include "core/events/close_event.h"
#include "core/events/focus_event.h"
#include "core/events/gesture_event.h"
#include "core/events/hashchange_event.h"
#include "core/events/input_event.h"
#include "core/events/intersection_change_event.h"
#include "core/events/mouse_event.h"
#include "core/api/exception_state.h"
#include "core/events/pointer_event.h"
#include "core/events/transition_event.h"
#include "core/events/ui_event.h"
#include "plugin_api/transition_event_init.h"
namespace webf {
double TransitionEventPublicMethods::ElapsedTime(TransitionEvent* transition_event) {
  return transition_event->elapsedTime();
}
const char* TransitionEventPublicMethods::PropertyName(TransitionEvent* transition_event) {
  return transition_event->propertyName().ToStringView().Characters8();
}
const char* TransitionEventPublicMethods::DupPropertyName(TransitionEvent* transition_event) {
  const char* buffer = transition_event->propertyName().ToStringView().Characters8();
  return strdup(buffer);
}
const char* TransitionEventPublicMethods::PseudoElement(TransitionEvent* transition_event) {
  return transition_event->pseudoElement().ToStringView().Characters8();
}
const char* TransitionEventPublicMethods::DupPseudoElement(TransitionEvent* transition_event) {
  const char* buffer = transition_event->pseudoElement().ToStringView().Characters8();
  return strdup(buffer);
}
WebFValue<TransitionEvent, TransitionEventPublicMethods> ExecutingContextWebFMethods::CreateTransitionEvent(ExecutingContext* context,  const char* type, ExceptionState& exception_state) {
  AtomicString type_atomic = AtomicString(context->ctx(), type);
  TransitionEvent* event = TransitionEvent::Create(context,  type_atomic,  exception_state);
  WebFValueStatus* status_block = event->KeepAlive();
  return WebFValue<TransitionEvent, TransitionEventPublicMethods>(event, event->transitionEventPublicMethods(), status_block);
};
WebFValue<TransitionEvent, TransitionEventPublicMethods> ExecutingContextWebFMethods::CreateTransitionEventWithOptions(ExecutingContext* context, const char* type, WebFTransitionEventInit* init,  ExceptionState& exception_state) {
  AtomicString type_atomic = AtomicString(context->ctx(), type);
  std::shared_ptr<TransitionEventInit> init_class = TransitionEventInit::Create();
  init_class->setElapsedTime(init->elapsed_time);
  AtomicString property_name_atomic = AtomicString(context->ctx(), init->property_name);
  init_class->setPropertyName(property_name_atomic);
  AtomicString pseudo_element_atomic = AtomicString(context->ctx(), init->pseudo_element);
  init_class->setPseudoElement(pseudo_element_atomic);
  init_class->setBubbles(init->bubbles);
  init_class->setCancelable(init->cancelable);
  init_class->setComposed(init->composed);
  TransitionEvent* event = TransitionEvent::Create(context, type_atomic, init_class, exception_state);
  WebFValueStatus* status_block = event->KeepAlive();
  return WebFValue<TransitionEvent, TransitionEventPublicMethods>(event, event->transitionEventPublicMethods(), status_block);
};
}  // namespace webf
