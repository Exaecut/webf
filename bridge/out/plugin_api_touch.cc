// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
// clang-format off
/*
 * Copyright (C) 2022-present The WebF authors. All rights reserved.
 */
#include "plugin_api/touch.h"
#include "plugin_api/event_target.h"
#include "plugin_api/exception_state.h"
#include "plugin_api/executing_context.h"
#include "core/dom/events/event.h"
#include "core/dom/events/custom_event.h"
#include "core/native/script_value_ref.h"
#include "core/dom/events/event_target.h"
#include "core/events/animation_event.h"
#include "core/events/close_event.h"
#include "core/events/focus_event.h"
#include "core/events/gesture_event.h"
#include "core/events/hashchange_event.h"
#include "core/events/input_event.h"
#include "core/events/intersection_change_event.h"
#include "core/events/pop_state_event.h"
#include "core/events/mouse_event.h"
#include "core/api/exception_state.h"
#include "core/events/pointer_event.h"
#include "core/events/transition_event.h"
#include "core/events/ui_event.h"
#include "core/dom/legacy/element_attributes.h"
#include "core/css/inline_css_style_declaration.h"
#include "core/css/computed_css_style_declaration.h"
#include "core/dom/legacy/bounding_client_rect.h"
#include "core/dom/dom_string_map.h"
#include "core/timing/performance_mark.h"
#include "core/dom/mutation_observer_registration.h"
#include "core/input/touch_list.h"
#include "core/input/touch.h"
#include "core/timing/performance_measure.h"
#include "core/events/promise_rejection_event.h"
#include "core/events/hybrid_router_change_event.h"
#include "core/events/error_event.h"
#include "core/events/message_event.h"
namespace webf {
double TouchPublicMethods::AltitudeAngle(Touch* touch) {
  return touch->altitudeAngle();
}
double TouchPublicMethods::AzimuthAngle(Touch* touch) {
  return touch->azimuthAngle();
}
double TouchPublicMethods::ClientX(Touch* touch) {
  return touch->clientX();
}
double TouchPublicMethods::ClientY(Touch* touch) {
  return touch->clientY();
}
double TouchPublicMethods::Force(Touch* touch) {
  return touch->force();
}
double TouchPublicMethods::Identifier(Touch* touch) {
  return touch->identifier();
}
double TouchPublicMethods::PageX(Touch* touch) {
  return touch->pageX();
}
double TouchPublicMethods::PageY(Touch* touch) {
  return touch->pageY();
}
double TouchPublicMethods::RadiusX(Touch* touch) {
  return touch->radiusX();
}
double TouchPublicMethods::RadiusY(Touch* touch) {
  return touch->radiusY();
}
double TouchPublicMethods::RotationAngle(Touch* touch) {
  return touch->rotationAngle();
}
double TouchPublicMethods::ScreenX(Touch* touch) {
  return touch->screenX();
}
double TouchPublicMethods::ScreenY(Touch* touch) {
  return touch->screenY();
}
WebFValue<EventTarget, EventTargetPublicMethods> TouchPublicMethods::Target(Touch* touch) {
  auto* result = touch->target();
  WebFValueStatus* status_block = result->KeepAlive();
  return WebFValue<EventTarget, EventTargetPublicMethods>(result, result->eventTargetPublicMethods(), status_block);
}
void TouchPublicMethods::Release(Touch* touch) {
  touch->ReleaseAlive();
}
WebFValue<Touch, WebFPublicMethods> TouchPublicMethods::DynamicTo(webf::Touch* touch, webf::TouchType touch_type) {
  switch (touch_type) {
    case TouchType::kTouch: {
      WebFValueStatus* status_block = touch->KeepAlive();
      return WebFValue<Touch, WebFPublicMethods>(touch, touch->touchPublicMethods(), status_block);
    }
    default:
      assert_m(false, ("Unknown TouchType " + std::to_string(static_cast<int32_t>(touch_type))).c_str());
      return WebFValue<Touch, WebFPublicMethods>::Null();
  }
}
}  // namespace webf
