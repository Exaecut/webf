// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
// clang-format off
/*
 * Copyright (C) 2022-present The WebF authors. All rights reserved.
 */
#include "plugin_api/bounding_client_rect.h"
#include "plugin_api/event_target.h"
#include "plugin_api/exception_state.h"
#include "plugin_api/executing_context.h"
#include "core/dom/events/event.h"
#include "core/dom/events/custom_event.h"
#include "core/native/script_value_ref.h"
#include "core/dom/events/event_target.h"
#include "core/events/animation_event.h"
#include "core/events/close_event.h"
#include "core/events/focus_event.h"
#include "core/events/gesture_event.h"
#include "core/events/hashchange_event.h"
#include "core/events/input_event.h"
#include "core/events/intersection_change_event.h"
#include "core/events/pop_state_event.h"
#include "core/events/mouse_event.h"
#include "core/api/exception_state.h"
#include "core/events/pointer_event.h"
#include "core/events/transition_event.h"
#include "core/events/ui_event.h"
#include "core/dom/legacy/element_attributes.h"
#include "core/css/inline_css_style_declaration.h"
#include "core/css/computed_css_style_declaration.h"
#include "core/dom/legacy/bounding_client_rect.h"
#include "core/dom/dom_string_map.h"
#include "core/timing/performance_mark.h"
#include "core/dom/mutation_observer_registration.h"
#include "core/input/touch_list.h"
#include "core/input/touch.h"
#include "core/timing/performance_measure.h"
#include "core/events/promise_rejection_event.h"
#include "core/events/hybrid_router_change_event.h"
#include "core/events/error_event.h"
#include "core/events/message_event.h"
namespace webf {
double BoundingClientRectPublicMethods::X(BoundingClientRect* bounding_client_rect) {
  return bounding_client_rect->x();
}
double BoundingClientRectPublicMethods::Y(BoundingClientRect* bounding_client_rect) {
  return bounding_client_rect->y();
}
double BoundingClientRectPublicMethods::Width(BoundingClientRect* bounding_client_rect) {
  return bounding_client_rect->width();
}
double BoundingClientRectPublicMethods::Height(BoundingClientRect* bounding_client_rect) {
  return bounding_client_rect->height();
}
double BoundingClientRectPublicMethods::Top(BoundingClientRect* bounding_client_rect) {
  return bounding_client_rect->top();
}
double BoundingClientRectPublicMethods::Right(BoundingClientRect* bounding_client_rect) {
  return bounding_client_rect->right();
}
double BoundingClientRectPublicMethods::Bottom(BoundingClientRect* bounding_client_rect) {
  return bounding_client_rect->bottom();
}
double BoundingClientRectPublicMethods::Left(BoundingClientRect* bounding_client_rect) {
  return bounding_client_rect->left();
}
void BoundingClientRectPublicMethods::Release(BoundingClientRect* bounding_client_rect) {
  bounding_client_rect->ReleaseAlive();
}
WebFValue<BoundingClientRect, WebFPublicMethods> BoundingClientRectPublicMethods::DynamicTo(webf::BoundingClientRect* bounding_client_rect, webf::BoundingClientRectType bounding_client_rect_type) {
  switch (bounding_client_rect_type) {
    case BoundingClientRectType::kBoundingClientRect: {
      WebFValueStatus* status_block = bounding_client_rect->KeepAlive();
      return WebFValue<BoundingClientRect, WebFPublicMethods>(bounding_client_rect, bounding_client_rect->boundingClientRectPublicMethods(), status_block);
    }
    default:
      assert_m(false, ("Unknown BoundingClientRectType " + std::to_string(static_cast<int32_t>(bounding_client_rect_type))).c_str());
      return WebFValue<BoundingClientRect, WebFPublicMethods>::Null();
  }
}
}  // namespace webf
