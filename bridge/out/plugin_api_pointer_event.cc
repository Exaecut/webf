// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
// clang-format off
/*
 * Copyright (C) 2022-present The WebF authors. All rights reserved.
 */
#include "plugin_api/pointer_event.h"
#include "plugin_api/event_target.h"
#include "plugin_api/exception_state.h"
#include "plugin_api/executing_context.h"
#include "core/dom/events/event.h"
#include "core/dom/events/custom_event.h"
#include "core/native/script_value_ref.h"
#include "core/dom/events/event_target.h"
#include "core/events/animation_event.h"
#include "core/events/close_event.h"
#include "core/events/focus_event.h"
#include "core/events/gesture_event.h"
#include "core/events/hashchange_event.h"
#include "core/events/input_event.h"
#include "core/events/intersection_change_event.h"
#include "core/events/pop_state_event.h"
#include "core/events/mouse_event.h"
#include "core/api/exception_state.h"
#include "core/events/pointer_event.h"
#include "core/events/transition_event.h"
#include "core/events/ui_event.h"
#include "core/dom/legacy/element_attributes.h"
#include "core/css/inline_css_style_declaration.h"
#include "core/css/computed_css_style_declaration.h"
#include "core/dom/legacy/bounding_client_rect.h"
#include "core/dom/dom_string_map.h"
#include "core/timing/performance_mark.h"
#include "core/dom/mutation_observer_registration.h"
#include "core/input/touch_list.h"
#include "core/input/touch.h"
#include "core/timing/performance_measure.h"
#include "core/events/promise_rejection_event.h"
#include "core/events/hybrid_router_change_event.h"
#include "core/events/error_event.h"
#include "core/events/message_event.h"
#include "plugin_api/pointer_event_init.h"
namespace webf {
double PointerEventPublicMethods::Height(PointerEvent* pointer_event) {
  return pointer_event->height();
}
int32_t PointerEventPublicMethods::IsPrimary(PointerEvent* pointer_event) {
  return pointer_event->isPrimary();
}
double PointerEventPublicMethods::PointerId(PointerEvent* pointer_event) {
  return pointer_event->pointerId();
}
AtomicStringRef PointerEventPublicMethods::PointerType(PointerEvent* pointer_event) {
  auto value_atomic = pointer_event->pointerType();
  return AtomicStringRef(value_atomic);
}
double PointerEventPublicMethods::Pressure(PointerEvent* pointer_event) {
  return pointer_event->pressure();
}
double PointerEventPublicMethods::TangentialPressure(PointerEvent* pointer_event) {
  return pointer_event->tangentialPressure();
}
double PointerEventPublicMethods::TiltX(PointerEvent* pointer_event) {
  return pointer_event->tiltX();
}
double PointerEventPublicMethods::TiltY(PointerEvent* pointer_event) {
  return pointer_event->tiltY();
}
double PointerEventPublicMethods::Twist(PointerEvent* pointer_event) {
  return pointer_event->twist();
}
double PointerEventPublicMethods::Width(PointerEvent* pointer_event) {
  return pointer_event->width();
}
WebFValue<PointerEvent, PointerEventPublicMethods> ExecutingContextWebFMethods::CreatePointerEvent(ExecutingContext* context, const char* type, ExceptionState& exception_state) {
  AtomicString type_atomic = AtomicString(context->ctx(), type);
  PointerEvent* event = PointerEvent::Create(context, type_atomic, exception_state);
  WebFValueStatus* status_block = event->KeepAlive();
  return WebFValue<PointerEvent, PointerEventPublicMethods>(event, event->pointerEventPublicMethods(), status_block);
};
WebFValue<PointerEvent, PointerEventPublicMethods> ExecutingContextWebFMethods::CreatePointerEventWithOptions(ExecutingContext* context, const char* type, WebFPointerEventInit* init,  ExceptionState& exception_state) {
  AtomicString type_atomic = AtomicString(context->ctx(), type);
  std::shared_ptr<PointerEventInit> init_class = PointerEventInit::Create();
  init_class->setIsPrimary(init->is_primary);
  init_class->setPointerId(init->pointer_id);
  AtomicString pointer_type_atomic = AtomicString(context->ctx(), init->pointer_type);
  init_class->setPointerType(pointer_type_atomic);
  init_class->setPressure(init->pressure);
  init_class->setTangentialPressure(init->tangential_pressure);
  init_class->setTiltX(init->tilt_x);
  init_class->setTiltY(init->tilt_y);
  init_class->setTwist(init->twist);
  init_class->setWidth(init->width);
  init_class->setHeight(init->height);
  init_class->setDetail(init->detail);
  init_class->setView(init->view.value);
  init_class->setWhich(init->which);
  init_class->setBubbles(init->bubbles);
  init_class->setCancelable(init->cancelable);
  init_class->setComposed(init->composed);
  PointerEvent* event = PointerEvent::Create(context, type_atomic, init_class, exception_state);
  WebFValueStatus* status_block = event->KeepAlive();
  return WebFValue<PointerEvent, PointerEventPublicMethods>(event, event->pointerEventPublicMethods(), status_block);
};
}  // namespace webf
