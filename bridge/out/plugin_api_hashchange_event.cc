// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
// clang-format off
/*
 * Copyright (C) 2022-present The WebF authors. All rights reserved.
 */
#include "plugin_api/hashchange_event.h"
#include "plugin_api/event_target.h"
#include "plugin_api/exception_state.h"
#include "plugin_api/executing_context.h"
#include "core/dom/events/event.h"
#include "core/dom/events/custom_event.h"
#include "core/native/script_value_ref.h"
#include "core/dom/events/event_target.h"
#include "core/events/animation_event.h"
#include "core/events/close_event.h"
#include "core/events/focus_event.h"
#include "core/events/gesture_event.h"
#include "core/events/hashchange_event.h"
#include "core/events/input_event.h"
#include "core/events/intersection_change_event.h"
#include "core/events/pop_state_event.h"
#include "core/events/mouse_event.h"
#include "core/api/exception_state.h"
#include "core/events/pointer_event.h"
#include "core/events/transition_event.h"
#include "core/events/ui_event.h"
#include "core/dom/legacy/element_attributes.h"
#include "core/css/inline_css_style_declaration.h"
#include "core/css/computed_css_style_declaration.h"
#include "core/dom/legacy/bounding_client_rect.h"
#include "core/dom/dom_string_map.h"
#include "core/timing/performance_mark.h"
#include "core/dom/mutation_observer_registration.h"
#include "core/input/touch_list.h"
#include "core/input/touch.h"
#include "core/timing/performance_measure.h"
#include "core/events/promise_rejection_event.h"
#include "core/events/hybrid_router_change_event.h"
#include "core/events/error_event.h"
#include "core/events/message_event.h"
#include "plugin_api/hashchange_event_init.h"
namespace webf {
AtomicStringRef HashchangeEventPublicMethods::NewURL(HashchangeEvent* hashchange_event) {
  auto value_atomic = hashchange_event->newURL();
  return AtomicStringRef(value_atomic);
}
AtomicStringRef HashchangeEventPublicMethods::OldURL(HashchangeEvent* hashchange_event) {
  auto value_atomic = hashchange_event->oldURL();
  return AtomicStringRef(value_atomic);
}
WebFValue<HashchangeEvent, HashchangeEventPublicMethods> ExecutingContextWebFMethods::CreateHashchangeEvent(ExecutingContext* context, const char* type, ExceptionState& exception_state) {
  AtomicString type_atomic = AtomicString(context->ctx(), type);
  HashchangeEvent* event = HashchangeEvent::Create(context, type_atomic, exception_state);
  WebFValueStatus* status_block = event->KeepAlive();
  return WebFValue<HashchangeEvent, HashchangeEventPublicMethods>(event, event->hashchangeEventPublicMethods(), status_block);
};
WebFValue<HashchangeEvent, HashchangeEventPublicMethods> ExecutingContextWebFMethods::CreateHashchangeEventWithOptions(ExecutingContext* context, const char* type, WebFHashchangeEventInit* init,  ExceptionState& exception_state) {
  AtomicString type_atomic = AtomicString(context->ctx(), type);
  std::shared_ptr<HashchangeEventInit> init_class = HashchangeEventInit::Create();
  AtomicString old_url_atomic = AtomicString(context->ctx(), init->old_url);
  init_class->setOldURL(old_url_atomic);
  AtomicString new_url_atomic = AtomicString(context->ctx(), init->new_url);
  init_class->setNewURL(new_url_atomic);
  init_class->setBubbles(init->bubbles);
  init_class->setCancelable(init->cancelable);
  init_class->setComposed(init->composed);
  HashchangeEvent* event = HashchangeEvent::Create(context, type_atomic, init_class, exception_state);
  WebFValueStatus* status_block = event->KeepAlive();
  return WebFValue<HashchangeEvent, HashchangeEventPublicMethods>(event, event->hashchangeEventPublicMethods(), status_block);
};
}  // namespace webf
