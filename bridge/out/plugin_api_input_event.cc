// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
// clang-format off
/*
 * Copyright (C) 2022-present The WebF authors. All rights reserved.
 */
#include "plugin_api/input_event.h"
#include "plugin_api/event_target.h"
#include "plugin_api/exception_state.h"
#include "plugin_api/executing_context.h"
#include "core/dom/events/event.h"
#include "core/dom/events/custom_event.h"
#include "core/native/script_value_ref.h"
#include "core/dom/events/event_target.h"
#include "core/events/animation_event.h"
#include "core/events/close_event.h"
#include "core/events/focus_event.h"
#include "core/events/gesture_event.h"
#include "core/events/hashchange_event.h"
#include "core/events/input_event.h"
#include "core/events/intersection_change_event.h"
#include "core/events/mouse_event.h"
#include "core/api/exception_state.h"
#include "core/events/pointer_event.h"
#include "core/events/transition_event.h"
#include "core/events/ui_event.h"
#include "plugin_api/input_event_init.h"
namespace webf {
const char* InputEventPublicMethods::InputType(InputEvent* input_event) {
  return input_event->inputType().ToStringView().Characters8();
}
const char* InputEventPublicMethods::DupInputType(InputEvent* input_event) {
  const char* buffer = input_event->inputType().ToStringView().Characters8();
  return strdup(buffer);
}
const char* InputEventPublicMethods::Data(InputEvent* input_event) {
  return input_event->data().ToStringView().Characters8();
}
const char* InputEventPublicMethods::DupData(InputEvent* input_event) {
  const char* buffer = input_event->data().ToStringView().Characters8();
  return strdup(buffer);
}
WebFValue<InputEvent, InputEventPublicMethods> ExecutingContextWebFMethods::CreateInputEvent(ExecutingContext* context,  const char* type, ExceptionState& exception_state) {
  AtomicString type_atomic = AtomicString(context->ctx(), type);
  InputEvent* event = InputEvent::Create(context,  type_atomic,  exception_state);
  WebFValueStatus* status_block = event->KeepAlive();
  return WebFValue<InputEvent, InputEventPublicMethods>(event, event->inputEventPublicMethods(), status_block);
};
WebFValue<InputEvent, InputEventPublicMethods> ExecutingContextWebFMethods::CreateInputEventWithOptions(ExecutingContext* context, const char* type, WebFInputEventInit* init,  ExceptionState& exception_state) {
  AtomicString type_atomic = AtomicString(context->ctx(), type);
  std::shared_ptr<InputEventInit> init_class = InputEventInit::Create();
  AtomicString input_type_atomic = AtomicString(context->ctx(), init->input_type);
  init_class->setInputType(input_type_atomic);
  AtomicString data_atomic = AtomicString(context->ctx(), init->data);
  init_class->setData(data_atomic);
  init_class->setDetail(init->detail);
  init_class->setView(init->view.value);
  init_class->setWhich(init->which);
  init_class->setBubbles(init->bubbles);
  init_class->setCancelable(init->cancelable);
  init_class->setComposed(init->composed);
  InputEvent* event = InputEvent::Create(context, type_atomic, init_class, exception_state);
  WebFValueStatus* status_block = event->KeepAlive();
  return WebFValue<InputEvent, InputEventPublicMethods>(event, event->inputEventPublicMethods(), status_block);
};
}  // namespace webf
