// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
// clang-format off
/*
 * Copyright (C) 2022-present The WebF authors. All rights reserved.
 */
#include "plugin_api/error_event.h"
#include "plugin_api/event_target.h"
#include "plugin_api/exception_state.h"
#include "plugin_api/executing_context.h"
#include "core/dom/events/event.h"
#include "core/dom/events/custom_event.h"
#include "core/native/script_value_ref.h"
#include "core/dom/events/event_target.h"
#include "core/events/animation_event.h"
#include "core/events/close_event.h"
#include "core/events/focus_event.h"
#include "core/events/gesture_event.h"
#include "core/events/hashchange_event.h"
#include "core/events/input_event.h"
#include "core/events/intersection_change_event.h"
#include "core/events/pop_state_event.h"
#include "core/events/mouse_event.h"
#include "core/api/exception_state.h"
#include "core/events/pointer_event.h"
#include "core/events/transition_event.h"
#include "core/events/ui_event.h"
#include "core/dom/legacy/element_attributes.h"
#include "core/css/inline_css_style_declaration.h"
#include "core/css/computed_css_style_declaration.h"
#include "core/dom/legacy/bounding_client_rect.h"
#include "core/dom/dom_string_map.h"
#include "core/timing/performance_mark.h"
#include "core/dom/mutation_observer_registration.h"
#include "core/input/touch_list.h"
#include "core/input/touch.h"
#include "core/timing/performance_measure.h"
#include "core/events/promise_rejection_event.h"
#include "core/events/hybrid_router_change_event.h"
#include "core/events/error_event.h"
#include "core/events/message_event.h"
#include "plugin_api/error_event_init.h"
namespace webf {
AtomicStringRef ErrorEventPublicMethods::Message(ErrorEvent* error_event) {
  auto value_atomic = error_event->message();
  return AtomicStringRef(value_atomic);
}
AtomicStringRef ErrorEventPublicMethods::Filename(ErrorEvent* error_event) {
  auto value_atomic = error_event->filename();
  return AtomicStringRef(value_atomic);
}
double ErrorEventPublicMethods::Lineno(ErrorEvent* error_event) {
  return error_event->lineno();
}
double ErrorEventPublicMethods::Colno(ErrorEvent* error_event) {
  return error_event->colno();
}
NativeValue ErrorEventPublicMethods::Error(ErrorEvent* error_event, SharedExceptionState* shared_exception_state) {
  auto value = error_event->error();
  auto native_value = value.ToNative(error_event->ctx(), shared_exception_state->exception_state, false);
  return native_value;
}
WebFValue<ErrorEvent, ErrorEventPublicMethods> ExecutingContextWebFMethods::CreateErrorEvent(ExecutingContext* context, const char* type, ExceptionState& exception_state) {
  AtomicString type_atomic = AtomicString(context->ctx(), type);
  ErrorEvent* event = ErrorEvent::Create(context, type_atomic, exception_state);
  WebFValueStatus* status_block = event->KeepAlive();
  return WebFValue<ErrorEvent, ErrorEventPublicMethods>(event, event->errorEventPublicMethods(), status_block);
};
WebFValue<ErrorEvent, ErrorEventPublicMethods> ExecutingContextWebFMethods::CreateErrorEventWithOptions(ExecutingContext* context, const char* type, WebFErrorEventInit* init,  ExceptionState& exception_state) {
  AtomicString type_atomic = AtomicString(context->ctx(), type);
  std::shared_ptr<ErrorEventInit> init_class = ErrorEventInit::Create();
  AtomicString message_atomic = AtomicString(context->ctx(), init->message);
  init_class->setMessage(message_atomic);
  AtomicString filename_atomic = AtomicString(context->ctx(), init->filename);
  init_class->setFilename(filename_atomic);
  init_class->setLineno(init->lineno);
  init_class->setColno(init->colno);
  NativeValue error = init->error;
  ScriptValue error_script_value = ScriptValue(context->ctx(), error);
  init_class->setError(error_script_value);
  init_class->setBubbles(init->bubbles);
  init_class->setCancelable(init->cancelable);
  init_class->setComposed(init->composed);
  ErrorEvent* event = ErrorEvent::Create(context, type_atomic, init_class, exception_state);
  WebFValueStatus* status_block = event->KeepAlive();
  return WebFValue<ErrorEvent, ErrorEventPublicMethods>(event, event->errorEventPublicMethods(), status_block);
};
}  // namespace webf
