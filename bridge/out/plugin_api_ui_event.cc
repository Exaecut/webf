// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
// clang-format off
/*
 * Copyright (C) 2022-present The WebF authors. All rights reserved.
 */
#include "plugin_api/ui_event.h"
#include "plugin_api/event_target.h"
#include "plugin_api/exception_state.h"
#include "plugin_api/executing_context.h"
#include "core/dom/events/event.h"
#include "core/dom/events/custom_event.h"
#include "core/native/script_value_ref.h"
#include "core/dom/events/event_target.h"
#include "core/events/animation_event.h"
#include "core/events/close_event.h"
#include "core/events/focus_event.h"
#include "core/events/gesture_event.h"
#include "core/events/hashchange_event.h"
#include "core/events/input_event.h"
#include "core/events/intersection_change_event.h"
#include "core/events/mouse_event.h"
#include "core/api/exception_state.h"
#include "core/events/pointer_event.h"
#include "core/events/transition_event.h"
#include "core/events/ui_event.h"
#include "plugin_api/ui_event_init.h"
namespace webf {
double UIEventPublicMethods::Detail(UIEvent* ui_event) {
  return ui_event->detail();
}
WebFValue<Window, WindowPublicMethods> UIEventPublicMethods::View(UIEvent* ui_event) {
  auto* result = ui_event->view();
  WebFValueStatus* status_block = result->KeepAlive();
  return WebFValue<Window, WindowPublicMethods>(result, result->windowPublicMethods(), status_block);
}
double UIEventPublicMethods::Which(UIEvent* ui_event) {
  return ui_event->which();
}
WebFValue<UIEvent, UIEventPublicMethods> ExecutingContextWebFMethods::CreateUIEvent(ExecutingContext* context,  const char* type, ExceptionState& exception_state) {
  AtomicString type_atomic = AtomicString(context->ctx(), type);
  UIEvent* event = UIEvent::Create(context,  type_atomic,  exception_state);
  WebFValueStatus* status_block = event->KeepAlive();
  return WebFValue<UIEvent, UIEventPublicMethods>(event, event->uiEventPublicMethods(), status_block);
};
WebFValue<UIEvent, UIEventPublicMethods> ExecutingContextWebFMethods::CreateUIEventWithOptions(ExecutingContext* context, const char* type, WebFUIEventInit* init,  ExceptionState& exception_state) {
  AtomicString type_atomic = AtomicString(context->ctx(), type);
  std::shared_ptr<UIEventInit> init_class = UIEventInit::Create();
  init_class->setDetail(init->detail);
  init_class->setView(init->view.value);
  init_class->setWhich(init->which);
  init_class->setBubbles(init->bubbles);
  init_class->setCancelable(init->cancelable);
  init_class->setComposed(init->composed);
  UIEvent* event = UIEvent::Create(context, type_atomic, init_class, exception_state);
  WebFValueStatus* status_block = event->KeepAlive();
  return WebFValue<UIEvent, UIEventPublicMethods>(event, event->uiEventPublicMethods(), status_block);
};
}  // namespace webf
