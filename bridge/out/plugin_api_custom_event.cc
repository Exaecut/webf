// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
// clang-format off
/*
 * Copyright (C) 2022-present The WebF authors. All rights reserved.
 */
#include "plugin_api/custom_event.h"
#include "plugin_api/event_target.h"
#include "plugin_api/exception_state.h"
#include "plugin_api/executing_context.h"
#include "core/dom/events/event.h"
#include "core/dom/events/custom_event.h"
#include "core/native/script_value_ref.h"
#include "core/dom/events/event_target.h"
#include "core/events/animation_event.h"
#include "core/events/close_event.h"
#include "core/events/focus_event.h"
#include "core/events/gesture_event.h"
#include "core/events/hashchange_event.h"
#include "core/events/input_event.h"
#include "core/events/intersection_change_event.h"
#include "core/events/mouse_event.h"
#include "core/api/exception_state.h"
#include "core/events/pointer_event.h"
#include "core/events/transition_event.h"
#include "core/events/ui_event.h"
#include "plugin_api/custom_event_init.h"
namespace webf {
NativeValue CustomEventPublicMethods::Detail(CustomEvent* custom_event, SharedExceptionState* shared_exception_state) {
  auto value = custom_event->detail();
  auto native_value = value.ToNative(custom_event->ctx(), shared_exception_state->exception_state, false);
  return native_value;
}
void CustomEventPublicMethods::InitCustomEvent(CustomEvent* custom_event, const char* type, int32_t can_bubble, int32_t cancelable, NativeValue detail, SharedExceptionState* shared_exception_state) {
  webf::AtomicString type_atomic = webf::AtomicString(custom_event->ctx(), type);
  ScriptValue detail_script_value = ScriptValue(custom_event->ctx(), detail);
  return custom_event->initCustomEvent(type_atomic, can_bubble, cancelable, detail_script_value, shared_exception_state->exception_state);
}
WebFValue<CustomEvent, CustomEventPublicMethods> ExecutingContextWebFMethods::CreateCustomEvent(ExecutingContext* context,  const char* type, ExceptionState& exception_state) {
  AtomicString type_atomic = AtomicString(context->ctx(), type);
  CustomEvent* event = CustomEvent::Create(context,  type_atomic,  exception_state);
  WebFValueStatus* status_block = event->KeepAlive();
  return WebFValue<CustomEvent, CustomEventPublicMethods>(event, event->customEventPublicMethods(), status_block);
};
WebFValue<CustomEvent, CustomEventPublicMethods> ExecutingContextWebFMethods::CreateCustomEventWithOptions(ExecutingContext* context, const char* type, WebFCustomEventInit* init,  ExceptionState& exception_state) {
  AtomicString type_atomic = AtomicString(context->ctx(), type);
  std::shared_ptr<CustomEventInit> init_class = CustomEventInit::Create();
  NativeValue detail = init->detail;
  ScriptValue detail_script_value = ScriptValue(context->ctx(), detail);
  init_class->setDetail(detail_script_value);
  init_class->setBubbles(init->bubbles);
  init_class->setCancelable(init->cancelable);
  init_class->setComposed(init->composed);
  CustomEvent* event = CustomEvent::Create(context, type_atomic, init_class, exception_state);
  WebFValueStatus* status_block = event->KeepAlive();
  return WebFValue<CustomEvent, CustomEventPublicMethods>(event, event->customEventPublicMethods(), status_block);
};
}  // namespace webf
