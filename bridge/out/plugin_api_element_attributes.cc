// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
// clang-format off
/*
 * Copyright (C) 2022-present The WebF authors. All rights reserved.
 */
#include "plugin_api/element_attributes.h"
#include "plugin_api/event_target.h"
#include "plugin_api/exception_state.h"
#include "plugin_api/executing_context.h"
#include "core/dom/events/event.h"
#include "core/dom/events/custom_event.h"
#include "core/native/script_value_ref.h"
#include "core/dom/events/event_target.h"
#include "core/events/animation_event.h"
#include "core/events/close_event.h"
#include "core/events/focus_event.h"
#include "core/events/gesture_event.h"
#include "core/events/hashchange_event.h"
#include "core/events/input_event.h"
#include "core/events/intersection_change_event.h"
#include "core/events/pop_state_event.h"
#include "core/events/mouse_event.h"
#include "core/api/exception_state.h"
#include "core/events/pointer_event.h"
#include "core/events/transition_event.h"
#include "core/events/ui_event.h"
#include "core/dom/legacy/element_attributes.h"
#include "core/css/inline_css_style_declaration.h"
#include "core/css/computed_css_style_declaration.h"
#include "core/dom/legacy/bounding_client_rect.h"
#include "core/dom/dom_string_map.h"
#include "core/timing/performance_mark.h"
#include "core/dom/mutation_observer_registration.h"
#include "core/input/touch_list.h"
#include "core/input/touch.h"
#include "core/timing/performance_measure.h"
#include "core/events/promise_rejection_event.h"
#include "core/events/hybrid_router_change_event.h"
#include "core/events/error_event.h"
#include "core/events/message_event.h"
namespace webf {
AtomicStringRef ElementAttributesPublicMethods::GetAttribute(ElementAttributes* element_attributes, const char* name, SharedExceptionState* shared_exception_state) {
  webf::AtomicString name_atomic = webf::AtomicString(element_attributes->ctx(), name);
  auto value_atomic = element_attributes->getAttribute(name_atomic, shared_exception_state->exception_state);
  return AtomicStringRef(value_atomic);
}
void ElementAttributesPublicMethods::SetAttribute(ElementAttributes* element_attributes, const char* name, const char* value, SharedExceptionState* shared_exception_state) {
  webf::AtomicString name_atomic = webf::AtomicString(element_attributes->ctx(), name);
  webf::AtomicString value_atomic = webf::AtomicString(element_attributes->ctx(), value);
  element_attributes->setAttribute(name_atomic, value_atomic, shared_exception_state->exception_state);
}
int32_t ElementAttributesPublicMethods::HasAttribute(ElementAttributes* element_attributes, const char* name, SharedExceptionState* shared_exception_state) {
  webf::AtomicString name_atomic = webf::AtomicString(element_attributes->ctx(), name);
  return element_attributes->hasAttribute(name_atomic, shared_exception_state->exception_state);
}
void ElementAttributesPublicMethods::RemoveAttribute(ElementAttributes* element_attributes, const char* name, SharedExceptionState* shared_exception_state) {
  webf::AtomicString name_atomic = webf::AtomicString(element_attributes->ctx(), name);
  element_attributes->removeAttribute(name_atomic, shared_exception_state->exception_state);
}
void ElementAttributesPublicMethods::Release(ElementAttributes* element_attributes) {
  element_attributes->ReleaseAlive();
}
WebFValue<ElementAttributes, WebFPublicMethods> ElementAttributesPublicMethods::DynamicTo(webf::ElementAttributes* element_attributes, webf::ElementAttributesType element_attributes_type) {
  switch (element_attributes_type) {
    case ElementAttributesType::kElementAttributes: {
      WebFValueStatus* status_block = element_attributes->KeepAlive();
      return WebFValue<ElementAttributes, WebFPublicMethods>(element_attributes, element_attributes->elementAttributesPublicMethods(), status_block);
    }
    default:
      assert_m(false, ("Unknown ElementAttributesType " + std::to_string(static_cast<int32_t>(element_attributes_type))).c_str());
      return WebFValue<ElementAttributes, WebFPublicMethods>::Null();
  }
}
}  // namespace webf
