// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
// clang-format off
/*
 * Copyright (C) 2022-present The WebF authors. All rights reserved.
 */
#include "plugin_api/mutation_observer_registration.h"
#include "plugin_api/event_target.h"
#include "plugin_api/exception_state.h"
#include "plugin_api/executing_context.h"
#include "core/dom/events/event.h"
#include "core/dom/events/custom_event.h"
#include "core/native/script_value_ref.h"
#include "core/dom/events/event_target.h"
#include "core/events/animation_event.h"
#include "core/events/close_event.h"
#include "core/events/focus_event.h"
#include "core/events/gesture_event.h"
#include "core/events/hashchange_event.h"
#include "core/events/input_event.h"
#include "core/events/intersection_change_event.h"
#include "core/events/pop_state_event.h"
#include "core/events/mouse_event.h"
#include "core/api/exception_state.h"
#include "core/events/pointer_event.h"
#include "core/events/transition_event.h"
#include "core/events/ui_event.h"
#include "core/dom/legacy/element_attributes.h"
#include "core/css/inline_css_style_declaration.h"
#include "core/css/computed_css_style_declaration.h"
#include "core/dom/legacy/bounding_client_rect.h"
#include "core/dom/dom_string_map.h"
#include "core/timing/performance_mark.h"
#include "core/dom/mutation_observer_registration.h"
#include "core/input/touch_list.h"
#include "core/input/touch.h"
#include "core/timing/performance_measure.h"
#include "core/events/promise_rejection_event.h"
#include "core/events/hybrid_router_change_event.h"
#include "core/events/error_event.h"
#include "core/events/message_event.h"
namespace webf {
void MutationObserverRegistrationPublicMethods::Release(MutationObserverRegistration* mutation_observer_registration) {
  mutation_observer_registration->ReleaseAlive();
}
WebFValue<MutationObserverRegistration, WebFPublicMethods> MutationObserverRegistrationPublicMethods::DynamicTo(webf::MutationObserverRegistration* mutation_observer_registration, webf::MutationObserverRegistrationType mutation_observer_registration_type) {
  switch (mutation_observer_registration_type) {
    case MutationObserverRegistrationType::kMutationObserverRegistration: {
      WebFValueStatus* status_block = mutation_observer_registration->KeepAlive();
      return WebFValue<MutationObserverRegistration, WebFPublicMethods>(mutation_observer_registration, mutation_observer_registration->mutationObserverRegistrationPublicMethods(), status_block);
    }
    default:
      assert_m(false, ("Unknown MutationObserverRegistrationType " + std::to_string(static_cast<int32_t>(mutation_observer_registration_type))).c_str());
      return WebFValue<MutationObserverRegistration, WebFPublicMethods>::Null();
  }
}
}  // namespace webf
