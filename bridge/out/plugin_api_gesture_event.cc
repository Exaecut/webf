// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
// clang-format off
/*
 * Copyright (C) 2022-present The WebF authors. All rights reserved.
 */
#include "plugin_api/gesture_event.h"
#include "plugin_api/event_target.h"
#include "plugin_api/exception_state.h"
#include "plugin_api/executing_context.h"
#include "core/dom/events/event.h"
#include "core/dom/events/custom_event.h"
#include "core/native/script_value_ref.h"
#include "core/dom/events/event_target.h"
#include "core/events/animation_event.h"
#include "core/events/close_event.h"
#include "core/events/focus_event.h"
#include "core/events/gesture_event.h"
#include "core/events/hashchange_event.h"
#include "core/events/input_event.h"
#include "core/events/intersection_change_event.h"
#include "core/events/mouse_event.h"
#include "core/api/exception_state.h"
#include "core/events/pointer_event.h"
#include "core/events/transition_event.h"
#include "core/events/ui_event.h"
#include "plugin_api/gesture_event_init.h"
namespace webf {
const char* GestureEventPublicMethods::State(GestureEvent* gesture_event) {
  return gesture_event->state().ToStringView().Characters8();
}
const char* GestureEventPublicMethods::DupState(GestureEvent* gesture_event) {
  const char* buffer = gesture_event->state().ToStringView().Characters8();
  return strdup(buffer);
}
const char* GestureEventPublicMethods::Direction(GestureEvent* gesture_event) {
  return gesture_event->direction().ToStringView().Characters8();
}
const char* GestureEventPublicMethods::DupDirection(GestureEvent* gesture_event) {
  const char* buffer = gesture_event->direction().ToStringView().Characters8();
  return strdup(buffer);
}
double GestureEventPublicMethods::DeltaX(GestureEvent* gesture_event) {
  return gesture_event->deltaX();
}
double GestureEventPublicMethods::DeltaY(GestureEvent* gesture_event) {
  return gesture_event->deltaY();
}
double GestureEventPublicMethods::VelocityX(GestureEvent* gesture_event) {
  return gesture_event->velocityX();
}
double GestureEventPublicMethods::VelocityY(GestureEvent* gesture_event) {
  return gesture_event->velocityY();
}
double GestureEventPublicMethods::Scale(GestureEvent* gesture_event) {
  return gesture_event->scale();
}
double GestureEventPublicMethods::Rotation(GestureEvent* gesture_event) {
  return gesture_event->rotation();
}
WebFValue<GestureEvent, GestureEventPublicMethods> ExecutingContextWebFMethods::CreateGestureEvent(ExecutingContext* context,  const char* type, ExceptionState& exception_state) {
  AtomicString type_atomic = AtomicString(context->ctx(), type);
  GestureEvent* event = GestureEvent::Create(context,  type_atomic,  exception_state);
  WebFValueStatus* status_block = event->KeepAlive();
  return WebFValue<GestureEvent, GestureEventPublicMethods>(event, event->gestureEventPublicMethods(), status_block);
};
WebFValue<GestureEvent, GestureEventPublicMethods> ExecutingContextWebFMethods::CreateGestureEventWithOptions(ExecutingContext* context, const char* type, WebFGestureEventInit* init,  ExceptionState& exception_state) {
  AtomicString type_atomic = AtomicString(context->ctx(), type);
  std::shared_ptr<GestureEventInit> init_class = GestureEventInit::Create();
  AtomicString state_atomic = AtomicString(context->ctx(), init->state);
  init_class->setState(state_atomic);
  AtomicString direction_atomic = AtomicString(context->ctx(), init->direction);
  init_class->setDirection(direction_atomic);
  init_class->setDeltaX(init->delta_x);
  init_class->setDeltaY(init->delta_y);
  init_class->setVelocityX(init->velocity_x);
  init_class->setVelocityY(init->velocity_y);
  init_class->setScale(init->scale);
  init_class->setRotation(init->rotation);
  init_class->setBubbles(init->bubbles);
  init_class->setCancelable(init->cancelable);
  init_class->setComposed(init->composed);
  GestureEvent* event = GestureEvent::Create(context, type_atomic, init_class, exception_state);
  WebFValueStatus* status_block = event->KeepAlive();
  return WebFValue<GestureEvent, GestureEventPublicMethods>(event, event->gestureEventPublicMethods(), status_block);
};
}  // namespace webf
