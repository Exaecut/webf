// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
// clang-format off
/*
 * Copyright (C) 2022-present The WebF authors. All rights reserved.
 */
#include "plugin_api/promise_rejection_event.h"
#include "plugin_api/event_target.h"
#include "plugin_api/exception_state.h"
#include "plugin_api/executing_context.h"
#include "core/dom/events/event.h"
#include "core/dom/events/custom_event.h"
#include "core/native/script_value_ref.h"
#include "core/dom/events/event_target.h"
#include "core/events/animation_event.h"
#include "core/events/close_event.h"
#include "core/events/focus_event.h"
#include "core/events/gesture_event.h"
#include "core/events/hashchange_event.h"
#include "core/events/input_event.h"
#include "core/events/intersection_change_event.h"
#include "core/events/pop_state_event.h"
#include "core/events/mouse_event.h"
#include "core/api/exception_state.h"
#include "core/events/pointer_event.h"
#include "core/events/transition_event.h"
#include "core/events/ui_event.h"
#include "core/dom/legacy/element_attributes.h"
#include "core/css/inline_css_style_declaration.h"
#include "core/css/computed_css_style_declaration.h"
#include "core/dom/legacy/bounding_client_rect.h"
#include "core/dom/dom_string_map.h"
#include "core/timing/performance_mark.h"
#include "core/dom/mutation_observer_registration.h"
#include "core/input/touch_list.h"
#include "core/input/touch.h"
#include "core/timing/performance_measure.h"
#include "core/events/promise_rejection_event.h"
#include "core/events/hybrid_router_change_event.h"
#include "core/events/error_event.h"
#include "core/events/message_event.h"
#include "plugin_api/promise_rejection_event_init.h"
namespace webf {
NativeValue PromiseRejectionEventPublicMethods::Promise(PromiseRejectionEvent* promise_rejection_event, SharedExceptionState* shared_exception_state) {
  auto value = promise_rejection_event->promise();
  auto native_value = value.ToNative(promise_rejection_event->ctx(), shared_exception_state->exception_state, false);
  return native_value;
}
NativeValue PromiseRejectionEventPublicMethods::Reason(PromiseRejectionEvent* promise_rejection_event, SharedExceptionState* shared_exception_state) {
  auto value = promise_rejection_event->reason();
  auto native_value = value.ToNative(promise_rejection_event->ctx(), shared_exception_state->exception_state, false);
  return native_value;
}
WebFValue<PromiseRejectionEvent, PromiseRejectionEventPublicMethods> ExecutingContextWebFMethods::CreatePromiseRejectionEvent(ExecutingContext* context, const char* type, ExceptionState& exception_state) {
  AtomicString type_atomic = AtomicString(context->ctx(), type);
  PromiseRejectionEvent* event = PromiseRejectionEvent::Create(context, type_atomic, exception_state);
  WebFValueStatus* status_block = event->KeepAlive();
  return WebFValue<PromiseRejectionEvent, PromiseRejectionEventPublicMethods>(event, event->promiseRejectionEventPublicMethods(), status_block);
};
WebFValue<PromiseRejectionEvent, PromiseRejectionEventPublicMethods> ExecutingContextWebFMethods::CreatePromiseRejectionEventWithOptions(ExecutingContext* context, const char* type, WebFPromiseRejectionEventInit* init,  ExceptionState& exception_state) {
  AtomicString type_atomic = AtomicString(context->ctx(), type);
  std::shared_ptr<PromiseRejectionEventInit> init_class = PromiseRejectionEventInit::Create();
  NativeValue promise = init->promise;
  ScriptValue promise_script_value = ScriptValue(context->ctx(), promise);
  init_class->setPromise(promise_script_value);
  NativeValue reason = init->reason;
  ScriptValue reason_script_value = ScriptValue(context->ctx(), reason);
  init_class->setReason(reason_script_value);
  init_class->setBubbles(init->bubbles);
  init_class->setCancelable(init->cancelable);
  init_class->setComposed(init->composed);
  PromiseRejectionEvent* event = PromiseRejectionEvent::Create(context, type_atomic, init_class, exception_state);
  WebFValueStatus* status_block = event->KeepAlive();
  return WebFValue<PromiseRejectionEvent, PromiseRejectionEventPublicMethods>(event, event->promiseRejectionEventPublicMethods(), status_block);
};
}  // namespace webf
