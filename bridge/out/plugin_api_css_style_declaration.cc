// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
// clang-format off
/*
 * Copyright (C) 2022-present The WebF authors. All rights reserved.
 */
#include "plugin_api/css_style_declaration.h"
#include "plugin_api/event_target.h"
#include "plugin_api/exception_state.h"
#include "plugin_api/executing_context.h"
#include "core/dom/events/event.h"
#include "core/dom/events/custom_event.h"
#include "core/native/script_value_ref.h"
#include "core/dom/events/event_target.h"
#include "core/events/animation_event.h"
#include "core/events/close_event.h"
#include "core/events/focus_event.h"
#include "core/events/gesture_event.h"
#include "core/events/hashchange_event.h"
#include "core/events/input_event.h"
#include "core/events/intersection_change_event.h"
#include "core/events/pop_state_event.h"
#include "core/events/mouse_event.h"
#include "core/api/exception_state.h"
#include "core/events/pointer_event.h"
#include "core/events/transition_event.h"
#include "core/events/ui_event.h"
#include "core/dom/legacy/element_attributes.h"
#include "core/css/inline_css_style_declaration.h"
#include "core/css/computed_css_style_declaration.h"
#include "core/dom/legacy/bounding_client_rect.h"
#include "core/dom/dom_string_map.h"
#include "core/timing/performance_mark.h"
#include "core/dom/mutation_observer_registration.h"
#include "core/input/touch_list.h"
#include "core/input/touch.h"
#include "core/timing/performance_measure.h"
#include "core/events/promise_rejection_event.h"
#include "core/events/hybrid_router_change_event.h"
#include "core/events/error_event.h"
#include "core/events/message_event.h"
namespace webf {
AtomicStringRef CSSStyleDeclarationPublicMethods::CssText(CSSStyleDeclaration* css_style_declaration) {
  auto value_atomic = css_style_declaration->cssText();
  return AtomicStringRef(value_atomic);
}
void CSSStyleDeclarationPublicMethods::SetCssText(CSSStyleDeclaration* css_style_declaration, const char* cssText, SharedExceptionState* shared_exception_state) {
  webf::AtomicString cssTextAtomic = webf::AtomicString(css_style_declaration->ctx(), cssText);
  css_style_declaration->setCssText(cssTextAtomic, shared_exception_state->exception_state);
}
int64_t CSSStyleDeclarationPublicMethods::Length(CSSStyleDeclaration* css_style_declaration) {
  return css_style_declaration->length();
}
AtomicStringRef CSSStyleDeclarationPublicMethods::GetPropertyValue(CSSStyleDeclaration* css_style_declaration, const char* property, SharedExceptionState* shared_exception_state) {
  webf::AtomicString property_atomic = webf::AtomicString(css_style_declaration->ctx(), property);
  auto value_atomic = css_style_declaration->getPropertyValue(property_atomic, shared_exception_state->exception_state);
  return AtomicStringRef(value_atomic);
}
void CSSStyleDeclarationPublicMethods::SetProperty(CSSStyleDeclaration* css_style_declaration, const char* property, NativeValue value, SharedExceptionState* shared_exception_state) {
  webf::AtomicString property_atomic = webf::AtomicString(css_style_declaration->ctx(), property);
  ScriptValue value_script_value = ScriptValue(css_style_declaration->ctx(), value);
  css_style_declaration->setProperty(property_atomic, value_script_value, shared_exception_state->exception_state);
}
AtomicStringRef CSSStyleDeclarationPublicMethods::RemoveProperty(CSSStyleDeclaration* css_style_declaration, const char* property, SharedExceptionState* shared_exception_state) {
  webf::AtomicString property_atomic = webf::AtomicString(css_style_declaration->ctx(), property);
  auto value_atomic = css_style_declaration->removeProperty(property_atomic, shared_exception_state->exception_state);
  return AtomicStringRef(value_atomic);
}
void CSSStyleDeclarationPublicMethods::Release(CSSStyleDeclaration* css_style_declaration) {
  css_style_declaration->ReleaseAlive();
}
WebFValue<CSSStyleDeclaration, WebFPublicMethods> CSSStyleDeclarationPublicMethods::DynamicTo(webf::CSSStyleDeclaration* css_style_declaration, webf::CSSStyleDeclarationType css_style_declaration_type) {
  switch (css_style_declaration_type) {
    case CSSStyleDeclarationType::kCSSStyleDeclaration: {
      WebFValueStatus* status_block = css_style_declaration->KeepAlive();
      return WebFValue<CSSStyleDeclaration, WebFPublicMethods>(css_style_declaration, css_style_declaration->cssStyleDeclarationPublicMethods(), status_block);
    }
    case CSSStyleDeclarationType::kComputedCssStyleDeclaration: {
      auto* computed_css_style_declaration = webf::DynamicTo<ComputedCssStyleDeclaration>(css_style_declaration);
      if (computed_css_style_declaration == nullptr) {
        return WebFValue<CSSStyleDeclaration, WebFPublicMethods>::Null();
      }
      WebFValueStatus* status_block = computed_css_style_declaration->KeepAlive();
      return WebFValue<CSSStyleDeclaration, WebFPublicMethods>(computed_css_style_declaration, computed_css_style_declaration->computedCssStyleDeclarationPublicMethods(), status_block);
    }
    case CSSStyleDeclarationType::kInlineCssStyleDeclaration: {
      auto* inline_css_style_declaration = webf::DynamicTo<InlineCssStyleDeclaration>(css_style_declaration);
      if (inline_css_style_declaration == nullptr) {
        return WebFValue<CSSStyleDeclaration, WebFPublicMethods>::Null();
      }
      WebFValueStatus* status_block = inline_css_style_declaration->KeepAlive();
      return WebFValue<CSSStyleDeclaration, WebFPublicMethods>(inline_css_style_declaration, inline_css_style_declaration->inlineCssStyleDeclarationPublicMethods(), status_block);
    }
    default:
      assert_m(false, ("Unknown CSSStyleDeclarationType " + std::to_string(static_cast<int32_t>(css_style_declaration_type))).c_str());
      return WebFValue<CSSStyleDeclaration, WebFPublicMethods>::Null();
  }
}
}  // namespace webf
